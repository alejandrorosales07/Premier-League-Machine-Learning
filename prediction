import pandas as pd
matches = pd.read_csv("/matches.csv", index_col=0)
matches["date"] = pd.to_datetime(matches["date"])
matches["venue_code"] = matches["venue"].astype("category").cat.codes
matches["opp_code"] = matches["opponent"].astype("category").cat.codes
matches["hour"] = matches["time"].str.replace(":.+", "", regex=True).astype("int")
matches["daycode"] = matches["date"].dt.dayofweek
matches["target"] = (matches["result"] == "W").astype("int")
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)
train = matches["date"] < '2022-01-01'
test = matches["date"] > '2022-01-01'
predictors = [ "venue_code", "opp_code", "hour", "daycode"]
rf.fit(matches.loc[train, predictors], matches.loc[train, "target"])
RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)
preds = rf.predict(matches.loc[test, predictors])
from sklearn.metrics import accuracy_score
acc = accuracy_score(matches.loc[test, "target"], preds)
combined = pd.DataFrame(dict(actual=matches.loc[test, "target"], prediction=preds))
pd.crosstab(index=combined["actual"], columns=combined["prediction"])
from sklearn.metrics import precision_score
precision_score(matches.loc[test, "target"], preds)
grouped_matches = matches.groupby("team")
def rolling_averages(group, cols, new_cols):
  group = group.sort_values("date")
  rolling_stats = group[cols].rolling(3, closed='left').mean()
  group[new_cols] = rolling_stats
  group = group.dropna(subset=new_cols)
  return group
cols = ["gf", "ga", "sh", "sot", "dist", "fk", "pk", "pkatt"]
new_cols = [f"{c}_rolling" for c in cols]
matches_rolling = matches.groupby("team").apply(lambda x: rolling_averages(x, cols, new_cols))
matches_rolling = matches_rolling.droplevel('team')
matches_rolling.index = range(matches_rolling.shape[0])
def make_predictions(data, predictors):
  train = data["date"] < '2022-01-01'
  test = data["date"] > '2022-01-01'
  rf.fit(data.loc[train, predictors], data.loc[train, "target"])
  preds = rf.predict(data.loc[test, predictors])
  combined = pd.DataFrame(dict(actual=data.loc[test, "target"], prediction=preds), index=data.loc[test, :].index)
  precision = precision_score(combined["actual"], combined["prediction"])
  return combined, precision
combined, precision = make_predictions(matches_rolling, predictors + new_cols)
combined = combined.merge(matches_rolling[["date", "team", "opponent", "result"]], left_index=True, right_index=True)
class MissingDict(dict):
  __missing__ = lambda self, key: key
map_values = {
    "Brighton and Hove Albion": "Brighton",
    "Manchester United": "Manchester Utd",
    "Newcastle United": "Newcastle Utd",
    "Tottenham Hotspur": "Tottenham",
    "West Ham United": "West Ham",
    "Wolverhampton Wanderers": "Wolves"
              }
mapping = MissingDict(**map_values)
combined["new_team"] = combined["team"].map(mapping)
merged = combined.merge(combined, left_on=["date", "new_team"], right_on=["date", "opponent"])
merged[(merged["prediction_x"] == 1) & (merged["prediction_y"] ==0)]["actual_x"].value_counts()


